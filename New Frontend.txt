app.js
import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { motion } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { saveAs } from 'file-saver';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import './App.css';

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [darkMode, setDarkMode] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const sendMessage = async () => {
    if (!input.trim()) return;

    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    const userMessage = { sender: "user", text: input, timestamp };
    setMessages(prev => [...prev, userMessage]);
    setInput("");
    setIsTyping(true);

    try {
      const res = await axios.post("http://localhost:8000/chat", { message: input });
      const botMessage = {
        sender: "bot",
        text: res.data.reply,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      setMessages(prev => [...prev, {
        sender: "bot",
        text: "‚ùå Error: Failed to get response",
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      }]);
    } finally {
      setIsTyping(false);
    }
  };

  const toggleTheme = () => setDarkMode(prev => !prev);

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text)
      .then(() => toast.success("Copied to clipboard!"))
      .catch(() => toast.error("Failed to copy!"));
  };

  const exportChat = () => {
    const chatContent = messages.map(msg => {
      const who = msg.sender === "user" ? "You" : "AI";
      return `[${msg.timestamp}] ${who}: ${msg.text}`;
    }).join("\n\n");
    const blob = new Blob([chatContent], { type: "text/plain;charset=utf-8" });
    saveAs(blob, "chat_export.txt");
    toast.success("Chat exported successfully!");
  };

  useEffect(() => {
    document.body.className = darkMode ? 'dark' : 'light';
  }, [darkMode]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div className={`main-container ${darkMode ? 'dark-mode' : ''}`}>
      <ToastContainer
        position="bottom-right"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme={darkMode ? "dark" : "light"}
      />
      <header className="header">
        <div className="title">ü§ñ Talk to AI</div>
        <button className="theme-toggle" onClick={toggleTheme}>
          {darkMode ? '‚òÄÔ∏è Light' : 'üåô Dark'}
        </button>
      </header>

      <div className="chat-area">
        <div className="chat-box glass">
          {messages.map((msg, idx) => (
            <motion.div
              key={idx}
              className={`message ${msg.sender}`}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3 }}
            >
              <div className="avatar">{msg.sender === "user" ? "üßë" : "ü§ñ"}</div>
              <div className="message-content">
                {msg.sender === "bot" ? (
                  <>
                    <ReactMarkdown>{msg.text}</ReactMarkdown>
                    <button className="copy-btn" onClick={() => copyToClipboard(msg.text)}>üìã Copy</button>
                  </>
                ) : msg.text}
                <div className="timestamp">{msg.timestamp}</div>
              </div>
            </motion.div>
          ))}
          {isTyping && (
            <div className="message bot typing-indicator">
              <div className="avatar">ü§ñ</div>
              <div className="message-content">
                ChatGPT is typing<span className="dot">.</span><span className="dot">.</span><span className="dot">.</span>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="input-container glass">
          <textarea
            rows={1}
            value={input}
            onChange={e => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Type your message..."
          />
          <button onClick={sendMessage}>‚û§</button>
          <button onClick={exportChat} title="Export chat">üìÅ</button>
        </div>
      </div>
    </div>
  );
}

export default App;



app.css

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

body {
  margin: 0;
  font-family: 'Poppins', sans-serif;
  transition: background 0.5s, color 0.5s;
}

body.light {
  background: linear-gradient(to right, #f0f0f0, #dfe9f3);
  color: #000;
}

body.dark {
  background: linear-gradient(to right, #141e30, #243b55);
  color: #fff;
}

.main-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: hidden;
}

.header {
  padding: 15px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.15);
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 32px rgba(31, 38, 135, 0.1);
  z-index: 1;
}

.title {
  font-size: 22px;
  font-weight: 600;
}

.theme-toggle {
  background: transparent;
  color: inherit;
  border: none;
  font-size: 16px;
  cursor: pointer;
}

.chat-box {
  flex-grow: 1;
  overflow-y: auto;
  padding: 20px;
  border-radius: 16px;
  margin-bottom: 15px;
  max-height: 100%;
  scroll-behavior: smooth;
}

.chat-box::-webkit-scrollbar {
  width: 8px;
}

.chat-box::-webkit-scrollbar-track {
  background: transparent;
}

.chat-box::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.3);
  border-radius: 10px;
  backdrop-filter: blur(5px);
}

.chat-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  padding: 20px;
  overflow: hidden;
}

.input-container {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px;
  border-radius: 16px;
}

textarea {
  flex: 1;
  padding: 12px;
  border-radius: 12px;
  border: none;
  resize: none;
  font-size: 16px;
  font-family: inherit;
}

button {
  padding: 12px 16px;
  background: #005ca8;
  color: white;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  font-size: 18px;
}

.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(12px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
}

.message {
  display: flex;
  align-items: flex-end;
  margin: 10px 0;
  max-width: 90%;
}

.message.user {
  align-self: flex-end;
  flex-direction: row-reverse;
}

.message.bot {
  align-self: flex-start;
}

.avatar {
  font-size: 24px;
  margin: 0 10px;
}

.message-content {
  padding: 12px 16px;
  border-radius: 16px;
  background: rgba(255, 255, 255, 0.2);
  color: inherit;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  position: relative;
}

.message.user .message-content {
  background: rgba(0, 92, 168, 0.8);
  color: #fff;
}

.timestamp {
  font-size: 12px;
  opacity: 0.6;
  margin-top: 4px;
  text-align: right;
}

.typing-indicator .dot {
  animation: blink 1s infinite;
  margin-left: 2px;
}

.typing-indicator .dot:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator .dot:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes blink {
  0%, 100% { opacity: 0.2; }
  50% { opacity: 1; }
}

/* ‚úÖ Copy button */
.copy-btn {
  margin-top: 6px;
  font-size: 12px;
  padding: 4px 8px;
  border: none;
  border-radius: 6px;
  background-color: #005ca8;
  color: white;
  cursor: pointer;
}
.copy-btn:hover {
  background-color: #004a85;
}

@media (max-width: 600px) {
  .title {
    font-size: 18px;
  }

  .theme-toggle {
    font-size: 14px;
  }

  .message-content {
    font-size: 14px;
  }
}
